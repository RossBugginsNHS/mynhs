/* 
 * My NHS Graph
 *
 * WIP Strawman API ideas for a Unified API myNHS API Graph endpoint, bringing together both new \"User Generated Data\" and existing sources into one endpoint and one Authorisation model, supporting delegated user access and proxy access. Modeling that the records belong to the \"tennant\" with owners having proxy access (ie full) and users being shared specifics records. Oauth scopes, with modifiers of .shared and .all. Look at Microsoft Graph for where that comes from. To support idempotency, all POST apis are just requests to start something, the put starts this. Alows for evential consistency. Long running GETs are removed, by POSTing requests for data, with a GET endpoint returned.
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ProfileApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ProfileApiTests
    {
        private ProfileApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ProfileApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ProfileApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ProfileApi
            //Assert.IsInstanceOfType(typeof(ProfileApi), instance, "instance is a ProfileApi");
        }

        /// <summary>
        /// Test MynhsMyProfileCentralnhsGet
        /// </summary>
        [Test]
        public void MynhsMyProfileCentralnhsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.MynhsMyProfileCentralnhsGet();
            //Assert.IsInstanceOf<NhsProfile> (response, "response is NhsProfile");
        }
        /// <summary>
        /// Test MynhsMyProfileGet
        /// </summary>
        [Test]
        public void MynhsMyProfileGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.MynhsMyProfileGet();
            //Assert.IsInstanceOf<MyNhsProfile> (response, "response is MyNhsProfile");
        }
        /// <summary>
        /// Test MynhsMyProfileGpGet
        /// </summary>
        [Test]
        public void MynhsMyProfileGpGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.MynhsMyProfileGpGet();
            //Assert.IsInstanceOf<GpProfile> (response, "response is GpProfile");
        }
        /// <summary>
        /// Test MynhsUserIdProfileGet
        /// </summary>
        [Test]
        public void MynhsUserIdProfileGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.MynhsUserIdProfileGet(userId);
            //Assert.IsInstanceOf<MyNhsProfile> (response, "response is MyNhsProfile");
        }
    }

}
