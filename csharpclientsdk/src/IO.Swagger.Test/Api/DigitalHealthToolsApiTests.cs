/* 
 * My NHS Graph
 *
 * WIP Strawman API ideas for a Unified API myNHS API Graph endpoint, bringing together both new \"User Generated Data\" and existing sources into one endpoint and one Authorisation model, supporting delegated user access and proxy access. Modeling that the records belong to the \"tennant\" with owners having proxy access (ie full) and users being shared specifics records. Oauth scopes, with modifiers of .shared and .all. Look at Microsoft Graph for where that comes from. To support idempotency, all POST apis are just requests to start something, the put starts this. Alows for evential consistency. Long running GETs are removed, by POSTing requests for data, with a GET endpoint returned.
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DigitalHealthToolsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DigitalHealthToolsApiTests
    {
        private DigitalHealthToolsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DigitalHealthToolsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DigitalHealthToolsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DigitalHealthToolsApi
            //Assert.IsInstanceOfType(typeof(DigitalHealthToolsApi), instance, "instance is a DigitalHealthToolsApi");
        }

        /// <summary>
        /// Test MynhsToolsHealthcheckPost
        /// </summary>
        [Test]
        public void MynhsToolsHealthcheckPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DigitalHealthCheckRequest body = null;
            //var response = instance.MynhsToolsHealthcheckPost(body);
            //Assert.IsInstanceOf<DigitalHealthCheckResult> (response, "response is DigitalHealthCheckResult");
        }
        /// <summary>
        /// Test MynhsToolsHeartagePost
        /// </summary>
        [Test]
        public void MynhsToolsHeartagePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DigitalHealthCheckRequest body = null;
            //var response = instance.MynhsToolsHeartagePost(body);
            //Assert.IsInstanceOf<DigitalHealthCheckResult> (response, "response is DigitalHealthCheckResult");
        }
    }

}
