/* 
 * My NHS Graph
 *
 * WIP Strawman API ideas for a Unified API myNHS API Graph endpoint, bringing together both new \"User Generated Data\" and existing sources into one endpoint and one Authorisation model, supporting delegated user access and proxy access. Modeling that the records belong to the \"tennant\" with owners having proxy access (ie full) and users being shared specifics records. Oauth scopes, with modifiers of .shared and .all. Look at Microsoft Graph for where that comes from. To support idempotency, all POST apis are just requests to start something, the put starts this. Alows for evential consistency. Long running GETs are removed, by POSTing requests for data, with a GET endpoint returned.
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing MedicalRecordsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class MedicalRecordsApiTests
    {
        private MedicalRecordsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new MedicalRecordsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MedicalRecordsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' MedicalRecordsApi
            //Assert.IsInstanceOfType(typeof(MedicalRecordsApi), instance, "instance is a MedicalRecordsApi");
        }

        /// <summary>
        /// Test MynhsMyMedicalrecordsDetailedNhsRequestRecordsPost
        /// </summary>
        [Test]
        public void MynhsMyMedicalrecordsDetailedNhsRequestRecordsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.MynhsMyMedicalrecordsDetailedNhsRequestRecordsPost();
            //Assert.IsInstanceOf<MyNhsProfile> (response, "response is MyNhsProfile");
        }
        /// <summary>
        /// Test MynhsMyMedicalrecordsDetailedNhsRequestRecordsRequestIdGet
        /// </summary>
        [Test]
        public void MynhsMyMedicalrecordsDetailedNhsRequestRecordsRequestIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string requestId = null;
            //var response = instance.MynhsMyMedicalrecordsDetailedNhsRequestRecordsRequestIdGet(requestId);
            //Assert.IsInstanceOf<MyNhsProfile> (response, "response is MyNhsProfile");
        }
        /// <summary>
        /// Test MynhsMyMedicalrecordsDetailedNhsRequestRecordsRequestIdSubmitPut
        /// </summary>
        [Test]
        public void MynhsMyMedicalrecordsDetailedNhsRequestRecordsRequestIdSubmitPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string requestId = null;
            //var response = instance.MynhsMyMedicalrecordsDetailedNhsRequestRecordsRequestIdSubmitPut(requestId);
            //Assert.IsInstanceOf<MyNhsProfile> (response, "response is MyNhsProfile");
        }
        /// <summary>
        /// Test MynhsMyMedicalrecordsDetailedNhsRequestRecordsResultsResultIdGet
        /// </summary>
        [Test]
        public void MynhsMyMedicalrecordsDetailedNhsRequestRecordsResultsResultIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string resultId = null;
            //var response = instance.MynhsMyMedicalrecordsDetailedNhsRequestRecordsResultsResultIdGet(resultId);
            //Assert.IsInstanceOf<MyNhsProfile> (response, "response is MyNhsProfile");
        }
        /// <summary>
        /// Test MynhsMyMedicalrecordsSummaryNhsGet
        /// </summary>
        [Test]
        public void MynhsMyMedicalrecordsSummaryNhsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.MynhsMyMedicalrecordsSummaryNhsGet();
            //Assert.IsInstanceOf<MyNhsProfile> (response, "response is MyNhsProfile");
        }
        /// <summary>
        /// Test MynhsMyMedicalrecordsSummaryNhsTrustIdGet
        /// </summary>
        [Test]
        public void MynhsMyMedicalrecordsSummaryNhsTrustIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string trustId = null;
            //var response = instance.MynhsMyMedicalrecordsSummaryNhsTrustIdGet(trustId);
            //Assert.IsInstanceOf<MyNhsProfile> (response, "response is MyNhsProfile");
        }
    }

}
