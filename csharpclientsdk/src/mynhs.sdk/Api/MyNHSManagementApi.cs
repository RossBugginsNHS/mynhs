/* 
 * My NHS Graph
 *
 * WIP Strawman API ideas for a Unified API myNHS API Graph endpoint, bringing together both new \"User Generated Data\" and existing sources into one endpoint and one Authorisation model, supporting delegated user access and proxy access. Modeling that the records belong to the \"tennant\" with owners having proxy access (ie full) and users being shared specifics records. Oauth scopes, with modifiers of .shared and .all. Look at Microsoft Graph for where that comes from. To support idempotency, all POST apis are just requests to start something, the put starts this. Alows for evential consistency. Long running GETs are removed, by POSTing requests for data, with a GET endpoint returned.
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using mynhs.sdk.Client;
using mynhs.sdk.Model;

namespace mynhs.sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IMyNHSManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NhsProfile</returns>
        NhsProfile HelloworldHiGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NhsProfile</returns>
        ApiResponse<NhsProfile> HelloworldHiGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of all tenancies for the current user. Required OAuth Scopes: [tenants.read]
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NhsProfile</returns>
        NhsProfile MynhsmanagementTenantsGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of all tenancies for the current user. Required OAuth Scopes: [tenants.read]
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NhsProfile</returns>
        ApiResponse<NhsProfile> MynhsmanagementTenantsGetWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of NhsProfile</returns>
        System.Threading.Tasks.Task<NhsProfile> HelloworldHiGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (NhsProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<NhsProfile>> HelloworldHiGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of all tenancies for the current user. Required OAuth Scopes: [tenants.read]
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of NhsProfile</returns>
        System.Threading.Tasks.Task<NhsProfile> MynhsmanagementTenantsGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of all tenancies for the current user. Required OAuth Scopes: [tenants.read]
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (NhsProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<NhsProfile>> MynhsmanagementTenantsGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class MyNHSManagementApi : IMyNHSManagementApi
    {
        private mynhs.sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MyNHSManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MyNHSManagementApi(String basePath)
        {
            this.Configuration = new mynhs.sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = mynhs.sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MyNHSManagementApi"/> class
        /// </summary>
        /// <returns></returns>
        public MyNHSManagementApi()
        {
            this.Configuration = mynhs.sdk.Client.Configuration.Default;

            ExceptionFactory = mynhs.sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MyNHSManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MyNHSManagementApi(mynhs.sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = mynhs.sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = mynhs.sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mynhs.sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mynhs.sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Test
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NhsProfile</returns>
        public NhsProfile HelloworldHiGet ()
        {
             ApiResponse<NhsProfile> localVarResponse = HelloworldHiGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Test
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NhsProfile</returns>
        public ApiResponse< NhsProfile > HelloworldHiGetWithHttpInfo ()
        {

            var localVarPath = "./helloworld/hi";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HelloworldHiGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NhsProfile)));
        }

        /// <summary>
        ///  Test
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of NhsProfile</returns>
        public async System.Threading.Tasks.Task<NhsProfile> HelloworldHiGetAsync ()
        {
             ApiResponse<NhsProfile> localVarResponse = await HelloworldHiGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Test
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (NhsProfile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NhsProfile>> HelloworldHiGetAsyncWithHttpInfo ()
        {

            var localVarPath = "./helloworld/hi";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HelloworldHiGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NhsProfile)));
        }

        /// <summary>
        ///  Gets a list of all tenancies for the current user. Required OAuth Scopes: [tenants.read]
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NhsProfile</returns>
        public NhsProfile MynhsmanagementTenantsGet ()
        {
             ApiResponse<NhsProfile> localVarResponse = MynhsmanagementTenantsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of all tenancies for the current user. Required OAuth Scopes: [tenants.read]
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NhsProfile</returns>
        public ApiResponse< NhsProfile > MynhsmanagementTenantsGetWithHttpInfo ()
        {

            var localVarPath = "./mynhsmanagement/tenants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (MyNhsOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsmanagementTenantsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NhsProfile)));
        }

        /// <summary>
        ///  Gets a list of all tenancies for the current user. Required OAuth Scopes: [tenants.read]
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of NhsProfile</returns>
        public async System.Threading.Tasks.Task<NhsProfile> MynhsmanagementTenantsGetAsync ()
        {
             ApiResponse<NhsProfile> localVarResponse = await MynhsmanagementTenantsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of all tenancies for the current user. Required OAuth Scopes: [tenants.read]
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (NhsProfile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NhsProfile>> MynhsmanagementTenantsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "./mynhsmanagement/tenants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (MyNhsOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsmanagementTenantsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NhsProfile)));
        }

    }
}
