/* 
 * My NHS Graph
 *
 * WIP Strawman API ideas for a Unified API myNHS API Graph endpoint, bringing together both new \"User Generated Data\" and existing sources into one endpoint and one Authorisation model, supporting delegated user access and proxy access. Modeling that the records belong to the \"tennant\" with owners having proxy access (ie full) and users being shared specifics records. Oauth scopes, with modifiers of .shared and .all. Look at Microsoft Graph for where that comes from. To support idempotency, all POST apis are just requests to start something, the put starts this. Alows for evential consistency. Long running GETs are removed, by POSTing requests for data, with a GET endpoint returned.
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using mynhs.sdk.Client;
using mynhs.sdk.Model;

namespace mynhs.sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IMedicalRecordsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <returns>MyNhsProfile</returns>
        MyNhsProfile MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsPost (string userId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <returns>ApiResponse of MyNhsProfile</returns>
        ApiResponse<MyNhsProfile> MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsPostWithHttpInfo (string userId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="requestId"></param>
        /// <returns>MyNhsProfile</returns>
        MyNhsProfile MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdGet (string userId, string requestId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="requestId"></param>
        /// <returns>ApiResponse of MyNhsProfile</returns>
        ApiResponse<MyNhsProfile> MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdGetWithHttpInfo (string userId, string requestId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="requestId"></param>
        /// <returns>MyNhsProfile</returns>
        MyNhsProfile MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdSubmitPut (string userId, string requestId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="requestId"></param>
        /// <returns>ApiResponse of MyNhsProfile</returns>
        ApiResponse<MyNhsProfile> MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdSubmitPutWithHttpInfo (string userId, string requestId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="resultId"></param>
        /// <returns>MyNhsProfile</returns>
        MyNhsProfile MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsResultsResultIdGet (string userId, string resultId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="resultId"></param>
        /// <returns>ApiResponse of MyNhsProfile</returns>
        ApiResponse<MyNhsProfile> MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsResultsResultIdGetWithHttpInfo (string userId, string resultId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <returns>MyNhsProfile</returns>
        MyNhsProfile MynhsUserIdMedicalrecordsSummaryNhsGet (string userId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <returns>ApiResponse of MyNhsProfile</returns>
        ApiResponse<MyNhsProfile> MynhsUserIdMedicalrecordsSummaryNhsGetWithHttpInfo (string userId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="trustId"></param>
        /// <returns>MyNhsProfile</returns>
        MyNhsProfile MynhsUserIdMedicalrecordsSummaryNhsTrustIdGet (string userId, string trustId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="trustId"></param>
        /// <returns>ApiResponse of MyNhsProfile</returns>
        ApiResponse<MyNhsProfile> MynhsUserIdMedicalrecordsSummaryNhsTrustIdGetWithHttpInfo (string userId, string trustId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <returns>Task of MyNhsProfile</returns>
        System.Threading.Tasks.Task<MyNhsProfile> MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsPostAsync (string userId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <returns>Task of ApiResponse (MyNhsProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<MyNhsProfile>> MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsPostAsyncWithHttpInfo (string userId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="requestId"></param>
        /// <returns>Task of MyNhsProfile</returns>
        System.Threading.Tasks.Task<MyNhsProfile> MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdGetAsync (string userId, string requestId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="requestId"></param>
        /// <returns>Task of ApiResponse (MyNhsProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<MyNhsProfile>> MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdGetAsyncWithHttpInfo (string userId, string requestId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="requestId"></param>
        /// <returns>Task of MyNhsProfile</returns>
        System.Threading.Tasks.Task<MyNhsProfile> MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdSubmitPutAsync (string userId, string requestId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="requestId"></param>
        /// <returns>Task of ApiResponse (MyNhsProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<MyNhsProfile>> MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdSubmitPutAsyncWithHttpInfo (string userId, string requestId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="resultId"></param>
        /// <returns>Task of MyNhsProfile</returns>
        System.Threading.Tasks.Task<MyNhsProfile> MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsResultsResultIdGetAsync (string userId, string resultId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="resultId"></param>
        /// <returns>Task of ApiResponse (MyNhsProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<MyNhsProfile>> MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsResultsResultIdGetAsyncWithHttpInfo (string userId, string resultId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <returns>Task of MyNhsProfile</returns>
        System.Threading.Tasks.Task<MyNhsProfile> MynhsUserIdMedicalrecordsSummaryNhsGetAsync (string userId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <returns>Task of ApiResponse (MyNhsProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<MyNhsProfile>> MynhsUserIdMedicalrecordsSummaryNhsGetAsyncWithHttpInfo (string userId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="trustId"></param>
        /// <returns>Task of MyNhsProfile</returns>
        System.Threading.Tasks.Task<MyNhsProfile> MynhsUserIdMedicalrecordsSummaryNhsTrustIdGetAsync (string userId, string trustId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="trustId"></param>
        /// <returns>Task of ApiResponse (MyNhsProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<MyNhsProfile>> MynhsUserIdMedicalrecordsSummaryNhsTrustIdGetAsyncWithHttpInfo (string userId, string trustId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class MedicalRecordsApi : IMedicalRecordsApi
    {
        private mynhs.sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MedicalRecordsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MedicalRecordsApi(String basePath)
        {
            this.Configuration = new mynhs.sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = mynhs.sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MedicalRecordsApi"/> class
        /// </summary>
        /// <returns></returns>
        public MedicalRecordsApi()
        {
            this.Configuration = mynhs.sdk.Client.Configuration.Default;

            ExceptionFactory = mynhs.sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MedicalRecordsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MedicalRecordsApi(mynhs.sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = mynhs.sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = mynhs.sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mynhs.sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mynhs.sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <returns>MyNhsProfile</returns>
        public MyNhsProfile MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsPost (string userId)
        {
             ApiResponse<MyNhsProfile> localVarResponse = MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsPostWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <returns>ApiResponse of MyNhsProfile</returns>
        public ApiResponse< MyNhsProfile > MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsPostWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling MedicalRecordsApi->MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsPost");

            var localVarPath = "./mynhs/{userId}/medicalrecords/detailed/nhs/requestRecords";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // authentication (MyNhsOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MyNhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (MyNhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MyNhsProfile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <returns>Task of MyNhsProfile</returns>
        public async System.Threading.Tasks.Task<MyNhsProfile> MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsPostAsync (string userId)
        {
             ApiResponse<MyNhsProfile> localVarResponse = await MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsPostAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <returns>Task of ApiResponse (MyNhsProfile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MyNhsProfile>> MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsPostAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling MedicalRecordsApi->MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsPost");

            var localVarPath = "./mynhs/{userId}/medicalrecords/detailed/nhs/requestRecords";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // authentication (MyNhsOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MyNhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (MyNhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MyNhsProfile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="requestId"></param>
        /// <returns>MyNhsProfile</returns>
        public MyNhsProfile MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdGet (string userId, string requestId)
        {
             ApiResponse<MyNhsProfile> localVarResponse = MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdGetWithHttpInfo(userId, requestId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="requestId"></param>
        /// <returns>ApiResponse of MyNhsProfile</returns>
        public ApiResponse< MyNhsProfile > MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdGetWithHttpInfo (string userId, string requestId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling MedicalRecordsApi->MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdGet");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling MedicalRecordsApi->MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdGet");

            var localVarPath = "./mynhs/{userId}/medicalrecords/detailed/nhs/requestRecords/{requestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter
            // authentication (MyNhsOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MyNhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (MyNhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MyNhsProfile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="requestId"></param>
        /// <returns>Task of MyNhsProfile</returns>
        public async System.Threading.Tasks.Task<MyNhsProfile> MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdGetAsync (string userId, string requestId)
        {
             ApiResponse<MyNhsProfile> localVarResponse = await MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdGetAsyncWithHttpInfo(userId, requestId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="requestId"></param>
        /// <returns>Task of ApiResponse (MyNhsProfile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MyNhsProfile>> MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdGetAsyncWithHttpInfo (string userId, string requestId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling MedicalRecordsApi->MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdGet");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling MedicalRecordsApi->MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdGet");

            var localVarPath = "./mynhs/{userId}/medicalrecords/detailed/nhs/requestRecords/{requestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter
            // authentication (MyNhsOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MyNhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (MyNhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MyNhsProfile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="requestId"></param>
        /// <returns>MyNhsProfile</returns>
        public MyNhsProfile MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdSubmitPut (string userId, string requestId)
        {
             ApiResponse<MyNhsProfile> localVarResponse = MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdSubmitPutWithHttpInfo(userId, requestId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="requestId"></param>
        /// <returns>ApiResponse of MyNhsProfile</returns>
        public ApiResponse< MyNhsProfile > MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdSubmitPutWithHttpInfo (string userId, string requestId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling MedicalRecordsApi->MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdSubmitPut");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling MedicalRecordsApi->MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdSubmitPut");

            var localVarPath = "./mynhs/{userId}/medicalrecords/detailed/nhs/requestRecords/{requestId}/submit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter
            // authentication (MyNhsOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdSubmitPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MyNhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (MyNhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MyNhsProfile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="requestId"></param>
        /// <returns>Task of MyNhsProfile</returns>
        public async System.Threading.Tasks.Task<MyNhsProfile> MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdSubmitPutAsync (string userId, string requestId)
        {
             ApiResponse<MyNhsProfile> localVarResponse = await MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdSubmitPutAsyncWithHttpInfo(userId, requestId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="requestId"></param>
        /// <returns>Task of ApiResponse (MyNhsProfile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MyNhsProfile>> MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdSubmitPutAsyncWithHttpInfo (string userId, string requestId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling MedicalRecordsApi->MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdSubmitPut");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling MedicalRecordsApi->MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdSubmitPut");

            var localVarPath = "./mynhs/{userId}/medicalrecords/detailed/nhs/requestRecords/{requestId}/submit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter
            // authentication (MyNhsOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsRequestIdSubmitPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MyNhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (MyNhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MyNhsProfile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="resultId"></param>
        /// <returns>MyNhsProfile</returns>
        public MyNhsProfile MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsResultsResultIdGet (string userId, string resultId)
        {
             ApiResponse<MyNhsProfile> localVarResponse = MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsResultsResultIdGetWithHttpInfo(userId, resultId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="resultId"></param>
        /// <returns>ApiResponse of MyNhsProfile</returns>
        public ApiResponse< MyNhsProfile > MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsResultsResultIdGetWithHttpInfo (string userId, string resultId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling MedicalRecordsApi->MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsResultsResultIdGet");
            // verify the required parameter 'resultId' is set
            if (resultId == null)
                throw new ApiException(400, "Missing required parameter 'resultId' when calling MedicalRecordsApi->MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsResultsResultIdGet");

            var localVarPath = "./mynhs/{userId}/medicalrecords/detailed/nhs/requestRecords/results/{resultId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (resultId != null) localVarPathParams.Add("resultId", this.Configuration.ApiClient.ParameterToString(resultId)); // path parameter
            // authentication (MyNhsOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsResultsResultIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MyNhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (MyNhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MyNhsProfile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="resultId"></param>
        /// <returns>Task of MyNhsProfile</returns>
        public async System.Threading.Tasks.Task<MyNhsProfile> MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsResultsResultIdGetAsync (string userId, string resultId)
        {
             ApiResponse<MyNhsProfile> localVarResponse = await MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsResultsResultIdGetAsyncWithHttpInfo(userId, resultId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="resultId"></param>
        /// <returns>Task of ApiResponse (MyNhsProfile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MyNhsProfile>> MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsResultsResultIdGetAsyncWithHttpInfo (string userId, string resultId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling MedicalRecordsApi->MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsResultsResultIdGet");
            // verify the required parameter 'resultId' is set
            if (resultId == null)
                throw new ApiException(400, "Missing required parameter 'resultId' when calling MedicalRecordsApi->MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsResultsResultIdGet");

            var localVarPath = "./mynhs/{userId}/medicalrecords/detailed/nhs/requestRecords/results/{resultId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (resultId != null) localVarPathParams.Add("resultId", this.Configuration.ApiClient.ParameterToString(resultId)); // path parameter
            // authentication (MyNhsOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsUserIdMedicalrecordsDetailedNhsRequestRecordsResultsResultIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MyNhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (MyNhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MyNhsProfile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <returns>MyNhsProfile</returns>
        public MyNhsProfile MynhsUserIdMedicalrecordsSummaryNhsGet (string userId)
        {
             ApiResponse<MyNhsProfile> localVarResponse = MynhsUserIdMedicalrecordsSummaryNhsGetWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <returns>ApiResponse of MyNhsProfile</returns>
        public ApiResponse< MyNhsProfile > MynhsUserIdMedicalrecordsSummaryNhsGetWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling MedicalRecordsApi->MynhsUserIdMedicalrecordsSummaryNhsGet");

            var localVarPath = "./mynhs/{userId}/medicalrecords/summary/nhs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // authentication (MyNhsOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsUserIdMedicalrecordsSummaryNhsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MyNhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (MyNhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MyNhsProfile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <returns>Task of MyNhsProfile</returns>
        public async System.Threading.Tasks.Task<MyNhsProfile> MynhsUserIdMedicalrecordsSummaryNhsGetAsync (string userId)
        {
             ApiResponse<MyNhsProfile> localVarResponse = await MynhsUserIdMedicalrecordsSummaryNhsGetAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <returns>Task of ApiResponse (MyNhsProfile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MyNhsProfile>> MynhsUserIdMedicalrecordsSummaryNhsGetAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling MedicalRecordsApi->MynhsUserIdMedicalrecordsSummaryNhsGet");

            var localVarPath = "./mynhs/{userId}/medicalrecords/summary/nhs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // authentication (MyNhsOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsUserIdMedicalrecordsSummaryNhsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MyNhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (MyNhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MyNhsProfile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="trustId"></param>
        /// <returns>MyNhsProfile</returns>
        public MyNhsProfile MynhsUserIdMedicalrecordsSummaryNhsTrustIdGet (string userId, string trustId)
        {
             ApiResponse<MyNhsProfile> localVarResponse = MynhsUserIdMedicalrecordsSummaryNhsTrustIdGetWithHttpInfo(userId, trustId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="trustId"></param>
        /// <returns>ApiResponse of MyNhsProfile</returns>
        public ApiResponse< MyNhsProfile > MynhsUserIdMedicalrecordsSummaryNhsTrustIdGetWithHttpInfo (string userId, string trustId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling MedicalRecordsApi->MynhsUserIdMedicalrecordsSummaryNhsTrustIdGet");
            // verify the required parameter 'trustId' is set
            if (trustId == null)
                throw new ApiException(400, "Missing required parameter 'trustId' when calling MedicalRecordsApi->MynhsUserIdMedicalrecordsSummaryNhsTrustIdGet");

            var localVarPath = "./mynhs/{userId}/medicalrecords/summary/nhs/{trustId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (trustId != null) localVarPathParams.Add("trustId", this.Configuration.ApiClient.ParameterToString(trustId)); // path parameter
            // authentication (MyNhsOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsUserIdMedicalrecordsSummaryNhsTrustIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MyNhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (MyNhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MyNhsProfile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="trustId"></param>
        /// <returns>Task of MyNhsProfile</returns>
        public async System.Threading.Tasks.Task<MyNhsProfile> MynhsUserIdMedicalrecordsSummaryNhsTrustIdGetAsync (string userId, string trustId)
        {
             ApiResponse<MyNhsProfile> localVarResponse = await MynhsUserIdMedicalrecordsSummaryNhsTrustIdGetAsyncWithHttpInfo(userId, trustId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="trustId"></param>
        /// <returns>Task of ApiResponse (MyNhsProfile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MyNhsProfile>> MynhsUserIdMedicalrecordsSummaryNhsTrustIdGetAsyncWithHttpInfo (string userId, string trustId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling MedicalRecordsApi->MynhsUserIdMedicalrecordsSummaryNhsTrustIdGet");
            // verify the required parameter 'trustId' is set
            if (trustId == null)
                throw new ApiException(400, "Missing required parameter 'trustId' when calling MedicalRecordsApi->MynhsUserIdMedicalrecordsSummaryNhsTrustIdGet");

            var localVarPath = "./mynhs/{userId}/medicalrecords/summary/nhs/{trustId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (trustId != null) localVarPathParams.Add("trustId", this.Configuration.ApiClient.ParameterToString(trustId)); // path parameter
            // authentication (MyNhsOAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsUserIdMedicalrecordsSummaryNhsTrustIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MyNhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (MyNhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MyNhsProfile)));
        }

    }
}
