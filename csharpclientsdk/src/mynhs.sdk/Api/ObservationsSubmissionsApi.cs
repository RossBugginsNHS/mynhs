/* 
 * My NHS Graph
 *
 * WIP Strawman API ideas for a Unified API myNHS API Graph endpoint, bringing together both new \"User Generated Data\" and existing sources into one endpoint and one Authorisation model, supporting delegated user access and proxy access. Modeling that the records belong to the \"tennant\" with owners having proxy access (ie full) and users being shared specifics records. Oauth scopes, with modifiers of .shared and .all. Look at Microsoft Graph for where that comes from. To support idempotency, all POST apis are just requests to start something, the put starts this. Alows for evential consistency. Long running GETs are removed, by POSTing requests for data, with a GET endpoint returned.
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using mynhs.sdk.Client;
using mynhs.sdk.Model;

namespace mynhs.sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IObservationsSubmissionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <returns>SubmissionStatusBaseWithDataArray</returns>
        SubmissionStatusBaseWithDataArray MynhsUserIdObservationsSubmissionsGet (string userId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <returns>ApiResponse of SubmissionStatusBaseWithDataArray</returns>
        ApiResponse<SubmissionStatusBaseWithDataArray> MynhsUserIdObservationsSubmissionsGetWithHttpInfo (string userId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Starts a submission on an observation</param>
        /// <param name="userId">The User Id to access</param>
        /// <returns>SubmissionStatusBase</returns>
        SubmissionStatusBase MynhsUserIdObservationsSubmissionsPost (Observation body, string userId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Starts a submission on an observation</param>
        /// <param name="userId">The User Id to access</param>
        /// <returns>ApiResponse of SubmissionStatusBase</returns>
        ApiResponse<SubmissionStatusBase> MynhsUserIdObservationsSubmissionsPostWithHttpInfo (Observation body, string userId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="submissionId"></param>
        /// <returns>SubmissionStatus</returns>
        SubmissionStatus MynhsUserIdObservationsSubmissionsSubmissionIdGet (string userId, Guid? submissionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="submissionId"></param>
        /// <returns>ApiResponse of SubmissionStatus</returns>
        ApiResponse<SubmissionStatus> MynhsUserIdObservationsSubmissionsSubmissionIdGetWithHttpInfo (string userId, Guid? submissionId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Starts a submission on an observation</param>
        /// <param name="userId">The User Id to access</param>
        /// <param name="submissionId"></param>
        /// <returns>SubmissionStatusBase</returns>
        SubmissionStatusBase MynhsUserIdObservationsSubmissionsSubmissionIdPut (Observation body, string userId, Guid? submissionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Starts a submission on an observation</param>
        /// <param name="userId">The User Id to access</param>
        /// <param name="submissionId"></param>
        /// <returns>ApiResponse of SubmissionStatusBase</returns>
        ApiResponse<SubmissionStatusBase> MynhsUserIdObservationsSubmissionsSubmissionIdPutWithHttpInfo (Observation body, string userId, Guid? submissionId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits the request to create the observation submission. A PUT should be fully idempotent, so the result will always be the same. Call GET on /mynhs/{userId}/observations/submissions/{submissionId} to get the current status.
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="submissionId"></param>
        /// <returns>FinishedSubmissionStatusBaseWithoutLocation</returns>
        FinishedSubmissionStatusBaseWithoutLocation MynhsUserIdObservationsSubmissionsSubmissionIdSubmitPut (string userId, Guid? submissionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits the request to create the observation submission. A PUT should be fully idempotent, so the result will always be the same. Call GET on /mynhs/{userId}/observations/submissions/{submissionId} to get the current status.
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="submissionId"></param>
        /// <returns>ApiResponse of FinishedSubmissionStatusBaseWithoutLocation</returns>
        ApiResponse<FinishedSubmissionStatusBaseWithoutLocation> MynhsUserIdObservationsSubmissionsSubmissionIdSubmitPutWithHttpInfo (string userId, Guid? submissionId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <returns>Task of SubmissionStatusBaseWithDataArray</returns>
        System.Threading.Tasks.Task<SubmissionStatusBaseWithDataArray> MynhsUserIdObservationsSubmissionsGetAsync (string userId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <returns>Task of ApiResponse (SubmissionStatusBaseWithDataArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmissionStatusBaseWithDataArray>> MynhsUserIdObservationsSubmissionsGetAsyncWithHttpInfo (string userId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Starts a submission on an observation</param>
        /// <param name="userId">The User Id to access</param>
        /// <returns>Task of SubmissionStatusBase</returns>
        System.Threading.Tasks.Task<SubmissionStatusBase> MynhsUserIdObservationsSubmissionsPostAsync (Observation body, string userId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Starts a submission on an observation</param>
        /// <param name="userId">The User Id to access</param>
        /// <returns>Task of ApiResponse (SubmissionStatusBase)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmissionStatusBase>> MynhsUserIdObservationsSubmissionsPostAsyncWithHttpInfo (Observation body, string userId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="submissionId"></param>
        /// <returns>Task of SubmissionStatus</returns>
        System.Threading.Tasks.Task<SubmissionStatus> MynhsUserIdObservationsSubmissionsSubmissionIdGetAsync (string userId, Guid? submissionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="submissionId"></param>
        /// <returns>Task of ApiResponse (SubmissionStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmissionStatus>> MynhsUserIdObservationsSubmissionsSubmissionIdGetAsyncWithHttpInfo (string userId, Guid? submissionId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Starts a submission on an observation</param>
        /// <param name="userId">The User Id to access</param>
        /// <param name="submissionId"></param>
        /// <returns>Task of SubmissionStatusBase</returns>
        System.Threading.Tasks.Task<SubmissionStatusBase> MynhsUserIdObservationsSubmissionsSubmissionIdPutAsync (Observation body, string userId, Guid? submissionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Starts a submission on an observation</param>
        /// <param name="userId">The User Id to access</param>
        /// <param name="submissionId"></param>
        /// <returns>Task of ApiResponse (SubmissionStatusBase)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmissionStatusBase>> MynhsUserIdObservationsSubmissionsSubmissionIdPutAsyncWithHttpInfo (Observation body, string userId, Guid? submissionId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits the request to create the observation submission. A PUT should be fully idempotent, so the result will always be the same. Call GET on /mynhs/{userId}/observations/submissions/{submissionId} to get the current status.
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="submissionId"></param>
        /// <returns>Task of FinishedSubmissionStatusBaseWithoutLocation</returns>
        System.Threading.Tasks.Task<FinishedSubmissionStatusBaseWithoutLocation> MynhsUserIdObservationsSubmissionsSubmissionIdSubmitPutAsync (string userId, Guid? submissionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits the request to create the observation submission. A PUT should be fully idempotent, so the result will always be the same. Call GET on /mynhs/{userId}/observations/submissions/{submissionId} to get the current status.
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="submissionId"></param>
        /// <returns>Task of ApiResponse (FinishedSubmissionStatusBaseWithoutLocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<FinishedSubmissionStatusBaseWithoutLocation>> MynhsUserIdObservationsSubmissionsSubmissionIdSubmitPutAsyncWithHttpInfo (string userId, Guid? submissionId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ObservationsSubmissionsApi : IObservationsSubmissionsApi
    {
        private mynhs.sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObservationsSubmissionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObservationsSubmissionsApi(String basePath)
        {
            this.Configuration = new mynhs.sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = mynhs.sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObservationsSubmissionsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ObservationsSubmissionsApi()
        {
            this.Configuration = mynhs.sdk.Client.Configuration.Default;

            ExceptionFactory = mynhs.sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObservationsSubmissionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObservationsSubmissionsApi(mynhs.sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = mynhs.sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = mynhs.sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mynhs.sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mynhs.sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <returns>SubmissionStatusBaseWithDataArray</returns>
        public SubmissionStatusBaseWithDataArray MynhsUserIdObservationsSubmissionsGet (string userId)
        {
             ApiResponse<SubmissionStatusBaseWithDataArray> localVarResponse = MynhsUserIdObservationsSubmissionsGetWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <returns>ApiResponse of SubmissionStatusBaseWithDataArray</returns>
        public ApiResponse< SubmissionStatusBaseWithDataArray > MynhsUserIdObservationsSubmissionsGetWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ObservationsSubmissionsApi->MynhsUserIdObservationsSubmissionsGet");

            var localVarPath = "./mynhs/{userId}/observations/submissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsUserIdObservationsSubmissionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmissionStatusBaseWithDataArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SubmissionStatusBaseWithDataArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmissionStatusBaseWithDataArray)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <returns>Task of SubmissionStatusBaseWithDataArray</returns>
        public async System.Threading.Tasks.Task<SubmissionStatusBaseWithDataArray> MynhsUserIdObservationsSubmissionsGetAsync (string userId)
        {
             ApiResponse<SubmissionStatusBaseWithDataArray> localVarResponse = await MynhsUserIdObservationsSubmissionsGetAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <returns>Task of ApiResponse (SubmissionStatusBaseWithDataArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubmissionStatusBaseWithDataArray>> MynhsUserIdObservationsSubmissionsGetAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ObservationsSubmissionsApi->MynhsUserIdObservationsSubmissionsGet");

            var localVarPath = "./mynhs/{userId}/observations/submissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsUserIdObservationsSubmissionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmissionStatusBaseWithDataArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SubmissionStatusBaseWithDataArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmissionStatusBaseWithDataArray)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Starts a submission on an observation</param>
        /// <param name="userId">The User Id to access</param>
        /// <returns>SubmissionStatusBase</returns>
        public SubmissionStatusBase MynhsUserIdObservationsSubmissionsPost (Observation body, string userId)
        {
             ApiResponse<SubmissionStatusBase> localVarResponse = MynhsUserIdObservationsSubmissionsPostWithHttpInfo(body, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Starts a submission on an observation</param>
        /// <param name="userId">The User Id to access</param>
        /// <returns>ApiResponse of SubmissionStatusBase</returns>
        public ApiResponse< SubmissionStatusBase > MynhsUserIdObservationsSubmissionsPostWithHttpInfo (Observation body, string userId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ObservationsSubmissionsApi->MynhsUserIdObservationsSubmissionsPost");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ObservationsSubmissionsApi->MynhsUserIdObservationsSubmissionsPost");

            var localVarPath = "./mynhs/{userId}/observations/submissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsUserIdObservationsSubmissionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmissionStatusBase>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SubmissionStatusBase) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmissionStatusBase)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Starts a submission on an observation</param>
        /// <param name="userId">The User Id to access</param>
        /// <returns>Task of SubmissionStatusBase</returns>
        public async System.Threading.Tasks.Task<SubmissionStatusBase> MynhsUserIdObservationsSubmissionsPostAsync (Observation body, string userId)
        {
             ApiResponse<SubmissionStatusBase> localVarResponse = await MynhsUserIdObservationsSubmissionsPostAsyncWithHttpInfo(body, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Starts a submission on an observation</param>
        /// <param name="userId">The User Id to access</param>
        /// <returns>Task of ApiResponse (SubmissionStatusBase)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubmissionStatusBase>> MynhsUserIdObservationsSubmissionsPostAsyncWithHttpInfo (Observation body, string userId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ObservationsSubmissionsApi->MynhsUserIdObservationsSubmissionsPost");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ObservationsSubmissionsApi->MynhsUserIdObservationsSubmissionsPost");

            var localVarPath = "./mynhs/{userId}/observations/submissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsUserIdObservationsSubmissionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmissionStatusBase>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SubmissionStatusBase) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmissionStatusBase)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="submissionId"></param>
        /// <returns>SubmissionStatus</returns>
        public SubmissionStatus MynhsUserIdObservationsSubmissionsSubmissionIdGet (string userId, Guid? submissionId)
        {
             ApiResponse<SubmissionStatus> localVarResponse = MynhsUserIdObservationsSubmissionsSubmissionIdGetWithHttpInfo(userId, submissionId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="submissionId"></param>
        /// <returns>ApiResponse of SubmissionStatus</returns>
        public ApiResponse< SubmissionStatus > MynhsUserIdObservationsSubmissionsSubmissionIdGetWithHttpInfo (string userId, Guid? submissionId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ObservationsSubmissionsApi->MynhsUserIdObservationsSubmissionsSubmissionIdGet");
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
                throw new ApiException(400, "Missing required parameter 'submissionId' when calling ObservationsSubmissionsApi->MynhsUserIdObservationsSubmissionsSubmissionIdGet");

            var localVarPath = "./mynhs/{userId}/observations/submissions/{submissionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (submissionId != null) localVarPathParams.Add("submissionId", this.Configuration.ApiClient.ParameterToString(submissionId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsUserIdObservationsSubmissionsSubmissionIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmissionStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SubmissionStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmissionStatus)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="submissionId"></param>
        /// <returns>Task of SubmissionStatus</returns>
        public async System.Threading.Tasks.Task<SubmissionStatus> MynhsUserIdObservationsSubmissionsSubmissionIdGetAsync (string userId, Guid? submissionId)
        {
             ApiResponse<SubmissionStatus> localVarResponse = await MynhsUserIdObservationsSubmissionsSubmissionIdGetAsyncWithHttpInfo(userId, submissionId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="submissionId"></param>
        /// <returns>Task of ApiResponse (SubmissionStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubmissionStatus>> MynhsUserIdObservationsSubmissionsSubmissionIdGetAsyncWithHttpInfo (string userId, Guid? submissionId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ObservationsSubmissionsApi->MynhsUserIdObservationsSubmissionsSubmissionIdGet");
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
                throw new ApiException(400, "Missing required parameter 'submissionId' when calling ObservationsSubmissionsApi->MynhsUserIdObservationsSubmissionsSubmissionIdGet");

            var localVarPath = "./mynhs/{userId}/observations/submissions/{submissionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (submissionId != null) localVarPathParams.Add("submissionId", this.Configuration.ApiClient.ParameterToString(submissionId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsUserIdObservationsSubmissionsSubmissionIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmissionStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SubmissionStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmissionStatus)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Starts a submission on an observation</param>
        /// <param name="userId">The User Id to access</param>
        /// <param name="submissionId"></param>
        /// <returns>SubmissionStatusBase</returns>
        public SubmissionStatusBase MynhsUserIdObservationsSubmissionsSubmissionIdPut (Observation body, string userId, Guid? submissionId)
        {
             ApiResponse<SubmissionStatusBase> localVarResponse = MynhsUserIdObservationsSubmissionsSubmissionIdPutWithHttpInfo(body, userId, submissionId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Starts a submission on an observation</param>
        /// <param name="userId">The User Id to access</param>
        /// <param name="submissionId"></param>
        /// <returns>ApiResponse of SubmissionStatusBase</returns>
        public ApiResponse< SubmissionStatusBase > MynhsUserIdObservationsSubmissionsSubmissionIdPutWithHttpInfo (Observation body, string userId, Guid? submissionId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ObservationsSubmissionsApi->MynhsUserIdObservationsSubmissionsSubmissionIdPut");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ObservationsSubmissionsApi->MynhsUserIdObservationsSubmissionsSubmissionIdPut");
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
                throw new ApiException(400, "Missing required parameter 'submissionId' when calling ObservationsSubmissionsApi->MynhsUserIdObservationsSubmissionsSubmissionIdPut");

            var localVarPath = "./mynhs/{userId}/observations/submissions/{submissionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (submissionId != null) localVarPathParams.Add("submissionId", this.Configuration.ApiClient.ParameterToString(submissionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsUserIdObservationsSubmissionsSubmissionIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmissionStatusBase>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SubmissionStatusBase) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmissionStatusBase)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Starts a submission on an observation</param>
        /// <param name="userId">The User Id to access</param>
        /// <param name="submissionId"></param>
        /// <returns>Task of SubmissionStatusBase</returns>
        public async System.Threading.Tasks.Task<SubmissionStatusBase> MynhsUserIdObservationsSubmissionsSubmissionIdPutAsync (Observation body, string userId, Guid? submissionId)
        {
             ApiResponse<SubmissionStatusBase> localVarResponse = await MynhsUserIdObservationsSubmissionsSubmissionIdPutAsyncWithHttpInfo(body, userId, submissionId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Starts a submission on an observation</param>
        /// <param name="userId">The User Id to access</param>
        /// <param name="submissionId"></param>
        /// <returns>Task of ApiResponse (SubmissionStatusBase)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubmissionStatusBase>> MynhsUserIdObservationsSubmissionsSubmissionIdPutAsyncWithHttpInfo (Observation body, string userId, Guid? submissionId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ObservationsSubmissionsApi->MynhsUserIdObservationsSubmissionsSubmissionIdPut");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ObservationsSubmissionsApi->MynhsUserIdObservationsSubmissionsSubmissionIdPut");
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
                throw new ApiException(400, "Missing required parameter 'submissionId' when calling ObservationsSubmissionsApi->MynhsUserIdObservationsSubmissionsSubmissionIdPut");

            var localVarPath = "./mynhs/{userId}/observations/submissions/{submissionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (submissionId != null) localVarPathParams.Add("submissionId", this.Configuration.ApiClient.ParameterToString(submissionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsUserIdObservationsSubmissionsSubmissionIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmissionStatusBase>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SubmissionStatusBase) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmissionStatusBase)));
        }

        /// <summary>
        ///  Submits the request to create the observation submission. A PUT should be fully idempotent, so the result will always be the same. Call GET on /mynhs/{userId}/observations/submissions/{submissionId} to get the current status.
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="submissionId"></param>
        /// <returns>FinishedSubmissionStatusBaseWithoutLocation</returns>
        public FinishedSubmissionStatusBaseWithoutLocation MynhsUserIdObservationsSubmissionsSubmissionIdSubmitPut (string userId, Guid? submissionId)
        {
             ApiResponse<FinishedSubmissionStatusBaseWithoutLocation> localVarResponse = MynhsUserIdObservationsSubmissionsSubmissionIdSubmitPutWithHttpInfo(userId, submissionId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Submits the request to create the observation submission. A PUT should be fully idempotent, so the result will always be the same. Call GET on /mynhs/{userId}/observations/submissions/{submissionId} to get the current status.
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="submissionId"></param>
        /// <returns>ApiResponse of FinishedSubmissionStatusBaseWithoutLocation</returns>
        public ApiResponse< FinishedSubmissionStatusBaseWithoutLocation > MynhsUserIdObservationsSubmissionsSubmissionIdSubmitPutWithHttpInfo (string userId, Guid? submissionId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ObservationsSubmissionsApi->MynhsUserIdObservationsSubmissionsSubmissionIdSubmitPut");
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
                throw new ApiException(400, "Missing required parameter 'submissionId' when calling ObservationsSubmissionsApi->MynhsUserIdObservationsSubmissionsSubmissionIdSubmitPut");

            var localVarPath = "./mynhs/{userId}/observations/submissions/{submissionId}/submit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (submissionId != null) localVarPathParams.Add("submissionId", this.Configuration.ApiClient.ParameterToString(submissionId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsUserIdObservationsSubmissionsSubmissionIdSubmitPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FinishedSubmissionStatusBaseWithoutLocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (FinishedSubmissionStatusBaseWithoutLocation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FinishedSubmissionStatusBaseWithoutLocation)));
        }

        /// <summary>
        ///  Submits the request to create the observation submission. A PUT should be fully idempotent, so the result will always be the same. Call GET on /mynhs/{userId}/observations/submissions/{submissionId} to get the current status.
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="submissionId"></param>
        /// <returns>Task of FinishedSubmissionStatusBaseWithoutLocation</returns>
        public async System.Threading.Tasks.Task<FinishedSubmissionStatusBaseWithoutLocation> MynhsUserIdObservationsSubmissionsSubmissionIdSubmitPutAsync (string userId, Guid? submissionId)
        {
             ApiResponse<FinishedSubmissionStatusBaseWithoutLocation> localVarResponse = await MynhsUserIdObservationsSubmissionsSubmissionIdSubmitPutAsyncWithHttpInfo(userId, submissionId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Submits the request to create the observation submission. A PUT should be fully idempotent, so the result will always be the same. Call GET on /mynhs/{userId}/observations/submissions/{submissionId} to get the current status.
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The User Id to access</param>
        /// <param name="submissionId"></param>
        /// <returns>Task of ApiResponse (FinishedSubmissionStatusBaseWithoutLocation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FinishedSubmissionStatusBaseWithoutLocation>> MynhsUserIdObservationsSubmissionsSubmissionIdSubmitPutAsyncWithHttpInfo (string userId, Guid? submissionId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ObservationsSubmissionsApi->MynhsUserIdObservationsSubmissionsSubmissionIdSubmitPut");
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
                throw new ApiException(400, "Missing required parameter 'submissionId' when calling ObservationsSubmissionsApi->MynhsUserIdObservationsSubmissionsSubmissionIdSubmitPut");

            var localVarPath = "./mynhs/{userId}/observations/submissions/{submissionId}/submit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (submissionId != null) localVarPathParams.Add("submissionId", this.Configuration.ApiClient.ParameterToString(submissionId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsUserIdObservationsSubmissionsSubmissionIdSubmitPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FinishedSubmissionStatusBaseWithoutLocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (FinishedSubmissionStatusBaseWithoutLocation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FinishedSubmissionStatusBaseWithoutLocation)));
        }

    }
}
