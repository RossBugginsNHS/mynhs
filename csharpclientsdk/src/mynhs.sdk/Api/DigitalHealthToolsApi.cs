/* 
 * My NHS Graph
 *
 * WIP Strawman API ideas for a Unified API myNHS API Graph endpoint, bringing together both new \"User Generated Data\" and existing sources into one endpoint and one Authorisation model, supporting delegated user access and proxy access. Modeling that the records belong to the \"tennant\" with owners having proxy access (ie full) and users being shared specifics records. Oauth scopes, with modifiers of .shared and .all. Look at Microsoft Graph for where that comes from. To support idempotency, all POST apis are just requests to start something, the put starts this. Alows for evential consistency. Long running GETs are removed, by POSTing requests for data, with a GET endpoint returned.
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using mynhs.sdk.Client;
using mynhs.sdk.Model;

namespace mynhs.sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDigitalHealthToolsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Returns an analysis of the given blood pressure reading.</param>
        /// <returns>BloodPressureResult</returns>
        BloodPressureResult MynhsToolsBloodpressurePost (BloodPressure body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Returns an analysis of the given blood pressure reading.</param>
        /// <returns>ApiResponse of BloodPressureResult</returns>
        ApiResponse<BloodPressureResult> MynhsToolsBloodpressurePostWithHttpInfo (BloodPressure body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Optional description in *Markdown*</param>
        /// <returns>DigitalHealthCheckResult</returns>
        DigitalHealthCheckResult MynhsToolsHeartagePost (DigitalHealthCheckRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Optional description in *Markdown*</param>
        /// <returns>ApiResponse of DigitalHealthCheckResult</returns>
        ApiResponse<DigitalHealthCheckResult> MynhsToolsHeartagePostWithHttpInfo (DigitalHealthCheckRequest body);
        /// <summary>
        /// Run a health check on provided data
        /// </summary>
        /// <remarks>
        /// **Does not store anything**, just returns response
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Optional description in *Markdown*</param>
        /// <returns>DigitalHealthCheckResult</returns>
        DigitalHealthCheckResult PostHealthCheck (DigitalHealthCheckRequest body);

        /// <summary>
        /// Run a health check on provided data
        /// </summary>
        /// <remarks>
        /// **Does not store anything**, just returns response
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Optional description in *Markdown*</param>
        /// <returns>ApiResponse of DigitalHealthCheckResult</returns>
        ApiResponse<DigitalHealthCheckResult> PostHealthCheckWithHttpInfo (DigitalHealthCheckRequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Returns an analysis of the given blood pressure reading.</param>
        /// <returns>Task of BloodPressureResult</returns>
        System.Threading.Tasks.Task<BloodPressureResult> MynhsToolsBloodpressurePostAsync (BloodPressure body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Returns an analysis of the given blood pressure reading.</param>
        /// <returns>Task of ApiResponse (BloodPressureResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BloodPressureResult>> MynhsToolsBloodpressurePostAsyncWithHttpInfo (BloodPressure body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Optional description in *Markdown*</param>
        /// <returns>Task of DigitalHealthCheckResult</returns>
        System.Threading.Tasks.Task<DigitalHealthCheckResult> MynhsToolsHeartagePostAsync (DigitalHealthCheckRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Optional description in *Markdown*</param>
        /// <returns>Task of ApiResponse (DigitalHealthCheckResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DigitalHealthCheckResult>> MynhsToolsHeartagePostAsyncWithHttpInfo (DigitalHealthCheckRequest body);
        /// <summary>
        /// Run a health check on provided data
        /// </summary>
        /// <remarks>
        /// **Does not store anything**, just returns response
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Optional description in *Markdown*</param>
        /// <returns>Task of DigitalHealthCheckResult</returns>
        System.Threading.Tasks.Task<DigitalHealthCheckResult> PostHealthCheckAsync (DigitalHealthCheckRequest body);

        /// <summary>
        /// Run a health check on provided data
        /// </summary>
        /// <remarks>
        /// **Does not store anything**, just returns response
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Optional description in *Markdown*</param>
        /// <returns>Task of ApiResponse (DigitalHealthCheckResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DigitalHealthCheckResult>> PostHealthCheckAsyncWithHttpInfo (DigitalHealthCheckRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DigitalHealthToolsApi : IDigitalHealthToolsApi
    {
        private mynhs.sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DigitalHealthToolsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DigitalHealthToolsApi(String basePath)
        {
            this.Configuration = new mynhs.sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = mynhs.sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DigitalHealthToolsApi"/> class
        /// </summary>
        /// <returns></returns>
        public DigitalHealthToolsApi()
        {
            this.Configuration = mynhs.sdk.Client.Configuration.Default;

            ExceptionFactory = mynhs.sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DigitalHealthToolsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DigitalHealthToolsApi(mynhs.sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = mynhs.sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = mynhs.sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mynhs.sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mynhs.sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Returns an analysis of the given blood pressure reading.</param>
        /// <returns>BloodPressureResult</returns>
        public BloodPressureResult MynhsToolsBloodpressurePost (BloodPressure body)
        {
             ApiResponse<BloodPressureResult> localVarResponse = MynhsToolsBloodpressurePostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Returns an analysis of the given blood pressure reading.</param>
        /// <returns>ApiResponse of BloodPressureResult</returns>
        public ApiResponse< BloodPressureResult > MynhsToolsBloodpressurePostWithHttpInfo (BloodPressure body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DigitalHealthToolsApi->MynhsToolsBloodpressurePost");

            var localVarPath = "./mynhs/tools/bloodpressure";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsToolsBloodpressurePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BloodPressureResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (BloodPressureResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BloodPressureResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Returns an analysis of the given blood pressure reading.</param>
        /// <returns>Task of BloodPressureResult</returns>
        public async System.Threading.Tasks.Task<BloodPressureResult> MynhsToolsBloodpressurePostAsync (BloodPressure body)
        {
             ApiResponse<BloodPressureResult> localVarResponse = await MynhsToolsBloodpressurePostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Returns an analysis of the given blood pressure reading.</param>
        /// <returns>Task of ApiResponse (BloodPressureResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BloodPressureResult>> MynhsToolsBloodpressurePostAsyncWithHttpInfo (BloodPressure body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DigitalHealthToolsApi->MynhsToolsBloodpressurePost");

            var localVarPath = "./mynhs/tools/bloodpressure";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsToolsBloodpressurePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BloodPressureResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (BloodPressureResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BloodPressureResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Optional description in *Markdown*</param>
        /// <returns>DigitalHealthCheckResult</returns>
        public DigitalHealthCheckResult MynhsToolsHeartagePost (DigitalHealthCheckRequest body)
        {
             ApiResponse<DigitalHealthCheckResult> localVarResponse = MynhsToolsHeartagePostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Optional description in *Markdown*</param>
        /// <returns>ApiResponse of DigitalHealthCheckResult</returns>
        public ApiResponse< DigitalHealthCheckResult > MynhsToolsHeartagePostWithHttpInfo (DigitalHealthCheckRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DigitalHealthToolsApi->MynhsToolsHeartagePost");

            var localVarPath = "./mynhs/tools/heartage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsToolsHeartagePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DigitalHealthCheckResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DigitalHealthCheckResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DigitalHealthCheckResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Optional description in *Markdown*</param>
        /// <returns>Task of DigitalHealthCheckResult</returns>
        public async System.Threading.Tasks.Task<DigitalHealthCheckResult> MynhsToolsHeartagePostAsync (DigitalHealthCheckRequest body)
        {
             ApiResponse<DigitalHealthCheckResult> localVarResponse = await MynhsToolsHeartagePostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Optional description in *Markdown*</param>
        /// <returns>Task of ApiResponse (DigitalHealthCheckResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DigitalHealthCheckResult>> MynhsToolsHeartagePostAsyncWithHttpInfo (DigitalHealthCheckRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DigitalHealthToolsApi->MynhsToolsHeartagePost");

            var localVarPath = "./mynhs/tools/heartage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsToolsHeartagePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DigitalHealthCheckResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DigitalHealthCheckResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DigitalHealthCheckResult)));
        }

        /// <summary>
        /// Run a health check on provided data **Does not store anything**, just returns response
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Optional description in *Markdown*</param>
        /// <returns>DigitalHealthCheckResult</returns>
        public DigitalHealthCheckResult PostHealthCheck (DigitalHealthCheckRequest body)
        {
             ApiResponse<DigitalHealthCheckResult> localVarResponse = PostHealthCheckWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Run a health check on provided data **Does not store anything**, just returns response
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Optional description in *Markdown*</param>
        /// <returns>ApiResponse of DigitalHealthCheckResult</returns>
        public ApiResponse< DigitalHealthCheckResult > PostHealthCheckWithHttpInfo (DigitalHealthCheckRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DigitalHealthToolsApi->PostHealthCheck");

            var localVarPath = "./mynhs/tools/healthcheck";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostHealthCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DigitalHealthCheckResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DigitalHealthCheckResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DigitalHealthCheckResult)));
        }

        /// <summary>
        /// Run a health check on provided data **Does not store anything**, just returns response
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Optional description in *Markdown*</param>
        /// <returns>Task of DigitalHealthCheckResult</returns>
        public async System.Threading.Tasks.Task<DigitalHealthCheckResult> PostHealthCheckAsync (DigitalHealthCheckRequest body)
        {
             ApiResponse<DigitalHealthCheckResult> localVarResponse = await PostHealthCheckAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Run a health check on provided data **Does not store anything**, just returns response
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Optional description in *Markdown*</param>
        /// <returns>Task of ApiResponse (DigitalHealthCheckResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DigitalHealthCheckResult>> PostHealthCheckAsyncWithHttpInfo (DigitalHealthCheckRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DigitalHealthToolsApi->PostHealthCheck");

            var localVarPath = "./mynhs/tools/healthcheck";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostHealthCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DigitalHealthCheckResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DigitalHealthCheckResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DigitalHealthCheckResult)));
        }

    }
}
