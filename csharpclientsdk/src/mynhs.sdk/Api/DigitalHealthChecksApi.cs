/* 
 * My NHS Graph
 *
 * WIP Strawman API ideas for a Unified API myNHS API Graph endpoint, bringing together both new \"User Generated Data\" and existing sources into one endpoint and one Authorisation model, supporting delegated user access and proxy access. Modeling that the records belong to the \"tennant\" with owners having proxy access (ie full) and users being shared specifics records. Oauth scopes, with modifiers of .shared and .all. Look at Microsoft Graph for where that comes from. To support idempotency, all POST apis are just requests to start something, the put starts this. Alows for evential consistency. Long running GETs are removed, by POSTing requests for data, with a GET endpoint returned.
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using mynhs.sdk.Client;
using mynhs.sdk.Model;

namespace mynhs.sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDigitalHealthChecksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>NhsProfile</returns>
        NhsProfile MynhsMyDigitalhealthchecksHealthcheckidAgeGet (string healthcheckid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>ApiResponse of NhsProfile</returns>
        ApiResponse<NhsProfile> MynhsMyDigitalhealthchecksHealthcheckidAgeGetWithHttpInfo (string healthcheckid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>NhsProfile</returns>
        NhsProfile MynhsMyDigitalhealthchecksHealthcheckidBloodpressureGet (string healthcheckid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>ApiResponse of NhsProfile</returns>
        ApiResponse<NhsProfile> MynhsMyDigitalhealthchecksHealthcheckidBloodpressureGetWithHttpInfo (string healthcheckid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>NhsProfile</returns>
        NhsProfile MynhsMyDigitalhealthchecksHealthcheckidBloodsugarGet (string healthcheckid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>ApiResponse of NhsProfile</returns>
        ApiResponse<NhsProfile> MynhsMyDigitalhealthchecksHealthcheckidBloodsugarGetWithHttpInfo (string healthcheckid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>NhsProfile</returns>
        NhsProfile MynhsMyDigitalhealthchecksHealthcheckidColesterolGet (string healthcheckid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>ApiResponse of NhsProfile</returns>
        ApiResponse<NhsProfile> MynhsMyDigitalhealthchecksHealthcheckidColesterolGetWithHttpInfo (string healthcheckid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>NhsProfile</returns>
        NhsProfile MynhsMyDigitalhealthchecksHealthcheckidGet (string healthcheckid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>ApiResponse of NhsProfile</returns>
        ApiResponse<NhsProfile> MynhsMyDigitalhealthchecksHealthcheckidGetWithHttpInfo (string healthcheckid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>NhsProfile</returns>
        NhsProfile MynhsMyDigitalhealthchecksHealthcheckidHeightGet (string healthcheckid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>ApiResponse of NhsProfile</returns>
        ApiResponse<NhsProfile> MynhsMyDigitalhealthchecksHealthcheckidHeightGetWithHttpInfo (string healthcheckid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>NhsProfile</returns>
        NhsProfile MynhsMyDigitalhealthchecksHealthcheckidWeightGet (string healthcheckid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>ApiResponse of NhsProfile</returns>
        ApiResponse<NhsProfile> MynhsMyDigitalhealthchecksHealthcheckidWeightGetWithHttpInfo (string healthcheckid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>NhsProfile</returns>
        NhsProfile MynhsMyDigitalhealthchecksHealthcheckidWellnessquestionsGet (string healthcheckid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>ApiResponse of NhsProfile</returns>
        ApiResponse<NhsProfile> MynhsMyDigitalhealthchecksHealthcheckidWellnessquestionsGetWithHttpInfo (string healthcheckid);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of NhsProfile</returns>
        System.Threading.Tasks.Task<NhsProfile> MynhsMyDigitalhealthchecksHealthcheckidAgeGetAsync (string healthcheckid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of ApiResponse (NhsProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<NhsProfile>> MynhsMyDigitalhealthchecksHealthcheckidAgeGetAsyncWithHttpInfo (string healthcheckid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of NhsProfile</returns>
        System.Threading.Tasks.Task<NhsProfile> MynhsMyDigitalhealthchecksHealthcheckidBloodpressureGetAsync (string healthcheckid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of ApiResponse (NhsProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<NhsProfile>> MynhsMyDigitalhealthchecksHealthcheckidBloodpressureGetAsyncWithHttpInfo (string healthcheckid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of NhsProfile</returns>
        System.Threading.Tasks.Task<NhsProfile> MynhsMyDigitalhealthchecksHealthcheckidBloodsugarGetAsync (string healthcheckid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of ApiResponse (NhsProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<NhsProfile>> MynhsMyDigitalhealthchecksHealthcheckidBloodsugarGetAsyncWithHttpInfo (string healthcheckid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of NhsProfile</returns>
        System.Threading.Tasks.Task<NhsProfile> MynhsMyDigitalhealthchecksHealthcheckidColesterolGetAsync (string healthcheckid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of ApiResponse (NhsProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<NhsProfile>> MynhsMyDigitalhealthchecksHealthcheckidColesterolGetAsyncWithHttpInfo (string healthcheckid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of NhsProfile</returns>
        System.Threading.Tasks.Task<NhsProfile> MynhsMyDigitalhealthchecksHealthcheckidGetAsync (string healthcheckid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of ApiResponse (NhsProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<NhsProfile>> MynhsMyDigitalhealthchecksHealthcheckidGetAsyncWithHttpInfo (string healthcheckid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of NhsProfile</returns>
        System.Threading.Tasks.Task<NhsProfile> MynhsMyDigitalhealthchecksHealthcheckidHeightGetAsync (string healthcheckid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of ApiResponse (NhsProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<NhsProfile>> MynhsMyDigitalhealthchecksHealthcheckidHeightGetAsyncWithHttpInfo (string healthcheckid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of NhsProfile</returns>
        System.Threading.Tasks.Task<NhsProfile> MynhsMyDigitalhealthchecksHealthcheckidWeightGetAsync (string healthcheckid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of ApiResponse (NhsProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<NhsProfile>> MynhsMyDigitalhealthchecksHealthcheckidWeightGetAsyncWithHttpInfo (string healthcheckid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of NhsProfile</returns>
        System.Threading.Tasks.Task<NhsProfile> MynhsMyDigitalhealthchecksHealthcheckidWellnessquestionsGetAsync (string healthcheckid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of ApiResponse (NhsProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<NhsProfile>> MynhsMyDigitalhealthchecksHealthcheckidWellnessquestionsGetAsyncWithHttpInfo (string healthcheckid);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DigitalHealthChecksApi : IDigitalHealthChecksApi
    {
        private mynhs.sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DigitalHealthChecksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DigitalHealthChecksApi(String basePath)
        {
            this.Configuration = new mynhs.sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = mynhs.sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DigitalHealthChecksApi"/> class
        /// </summary>
        /// <returns></returns>
        public DigitalHealthChecksApi()
        {
            this.Configuration = mynhs.sdk.Client.Configuration.Default;

            ExceptionFactory = mynhs.sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DigitalHealthChecksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DigitalHealthChecksApi(mynhs.sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = mynhs.sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = mynhs.sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mynhs.sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mynhs.sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>NhsProfile</returns>
        public NhsProfile MynhsMyDigitalhealthchecksHealthcheckidAgeGet (string healthcheckid)
        {
             ApiResponse<NhsProfile> localVarResponse = MynhsMyDigitalhealthchecksHealthcheckidAgeGetWithHttpInfo(healthcheckid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>ApiResponse of NhsProfile</returns>
        public ApiResponse< NhsProfile > MynhsMyDigitalhealthchecksHealthcheckidAgeGetWithHttpInfo (string healthcheckid)
        {
            // verify the required parameter 'healthcheckid' is set
            if (healthcheckid == null)
                throw new ApiException(400, "Missing required parameter 'healthcheckid' when calling DigitalHealthChecksApi->MynhsMyDigitalhealthchecksHealthcheckidAgeGet");

            var localVarPath = "./mynhs/my/digitalhealthchecks/{healthcheckid}/age";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (healthcheckid != null) localVarPathParams.Add("healthcheckid", this.Configuration.ApiClient.ParameterToString(healthcheckid)); // path parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsMyDigitalhealthchecksHealthcheckidAgeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NhsProfile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of NhsProfile</returns>
        public async System.Threading.Tasks.Task<NhsProfile> MynhsMyDigitalhealthchecksHealthcheckidAgeGetAsync (string healthcheckid)
        {
             ApiResponse<NhsProfile> localVarResponse = await MynhsMyDigitalhealthchecksHealthcheckidAgeGetAsyncWithHttpInfo(healthcheckid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of ApiResponse (NhsProfile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NhsProfile>> MynhsMyDigitalhealthchecksHealthcheckidAgeGetAsyncWithHttpInfo (string healthcheckid)
        {
            // verify the required parameter 'healthcheckid' is set
            if (healthcheckid == null)
                throw new ApiException(400, "Missing required parameter 'healthcheckid' when calling DigitalHealthChecksApi->MynhsMyDigitalhealthchecksHealthcheckidAgeGet");

            var localVarPath = "./mynhs/my/digitalhealthchecks/{healthcheckid}/age";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (healthcheckid != null) localVarPathParams.Add("healthcheckid", this.Configuration.ApiClient.ParameterToString(healthcheckid)); // path parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsMyDigitalhealthchecksHealthcheckidAgeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NhsProfile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>NhsProfile</returns>
        public NhsProfile MynhsMyDigitalhealthchecksHealthcheckidBloodpressureGet (string healthcheckid)
        {
             ApiResponse<NhsProfile> localVarResponse = MynhsMyDigitalhealthchecksHealthcheckidBloodpressureGetWithHttpInfo(healthcheckid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>ApiResponse of NhsProfile</returns>
        public ApiResponse< NhsProfile > MynhsMyDigitalhealthchecksHealthcheckidBloodpressureGetWithHttpInfo (string healthcheckid)
        {
            // verify the required parameter 'healthcheckid' is set
            if (healthcheckid == null)
                throw new ApiException(400, "Missing required parameter 'healthcheckid' when calling DigitalHealthChecksApi->MynhsMyDigitalhealthchecksHealthcheckidBloodpressureGet");

            var localVarPath = "./mynhs/my/digitalhealthchecks/{healthcheckid}/bloodpressure";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (healthcheckid != null) localVarPathParams.Add("healthcheckid", this.Configuration.ApiClient.ParameterToString(healthcheckid)); // path parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsMyDigitalhealthchecksHealthcheckidBloodpressureGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NhsProfile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of NhsProfile</returns>
        public async System.Threading.Tasks.Task<NhsProfile> MynhsMyDigitalhealthchecksHealthcheckidBloodpressureGetAsync (string healthcheckid)
        {
             ApiResponse<NhsProfile> localVarResponse = await MynhsMyDigitalhealthchecksHealthcheckidBloodpressureGetAsyncWithHttpInfo(healthcheckid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of ApiResponse (NhsProfile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NhsProfile>> MynhsMyDigitalhealthchecksHealthcheckidBloodpressureGetAsyncWithHttpInfo (string healthcheckid)
        {
            // verify the required parameter 'healthcheckid' is set
            if (healthcheckid == null)
                throw new ApiException(400, "Missing required parameter 'healthcheckid' when calling DigitalHealthChecksApi->MynhsMyDigitalhealthchecksHealthcheckidBloodpressureGet");

            var localVarPath = "./mynhs/my/digitalhealthchecks/{healthcheckid}/bloodpressure";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (healthcheckid != null) localVarPathParams.Add("healthcheckid", this.Configuration.ApiClient.ParameterToString(healthcheckid)); // path parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsMyDigitalhealthchecksHealthcheckidBloodpressureGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NhsProfile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>NhsProfile</returns>
        public NhsProfile MynhsMyDigitalhealthchecksHealthcheckidBloodsugarGet (string healthcheckid)
        {
             ApiResponse<NhsProfile> localVarResponse = MynhsMyDigitalhealthchecksHealthcheckidBloodsugarGetWithHttpInfo(healthcheckid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>ApiResponse of NhsProfile</returns>
        public ApiResponse< NhsProfile > MynhsMyDigitalhealthchecksHealthcheckidBloodsugarGetWithHttpInfo (string healthcheckid)
        {
            // verify the required parameter 'healthcheckid' is set
            if (healthcheckid == null)
                throw new ApiException(400, "Missing required parameter 'healthcheckid' when calling DigitalHealthChecksApi->MynhsMyDigitalhealthchecksHealthcheckidBloodsugarGet");

            var localVarPath = "./mynhs/my/digitalhealthchecks/{healthcheckid}/bloodsugar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (healthcheckid != null) localVarPathParams.Add("healthcheckid", this.Configuration.ApiClient.ParameterToString(healthcheckid)); // path parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsMyDigitalhealthchecksHealthcheckidBloodsugarGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NhsProfile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of NhsProfile</returns>
        public async System.Threading.Tasks.Task<NhsProfile> MynhsMyDigitalhealthchecksHealthcheckidBloodsugarGetAsync (string healthcheckid)
        {
             ApiResponse<NhsProfile> localVarResponse = await MynhsMyDigitalhealthchecksHealthcheckidBloodsugarGetAsyncWithHttpInfo(healthcheckid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of ApiResponse (NhsProfile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NhsProfile>> MynhsMyDigitalhealthchecksHealthcheckidBloodsugarGetAsyncWithHttpInfo (string healthcheckid)
        {
            // verify the required parameter 'healthcheckid' is set
            if (healthcheckid == null)
                throw new ApiException(400, "Missing required parameter 'healthcheckid' when calling DigitalHealthChecksApi->MynhsMyDigitalhealthchecksHealthcheckidBloodsugarGet");

            var localVarPath = "./mynhs/my/digitalhealthchecks/{healthcheckid}/bloodsugar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (healthcheckid != null) localVarPathParams.Add("healthcheckid", this.Configuration.ApiClient.ParameterToString(healthcheckid)); // path parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsMyDigitalhealthchecksHealthcheckidBloodsugarGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NhsProfile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>NhsProfile</returns>
        public NhsProfile MynhsMyDigitalhealthchecksHealthcheckidColesterolGet (string healthcheckid)
        {
             ApiResponse<NhsProfile> localVarResponse = MynhsMyDigitalhealthchecksHealthcheckidColesterolGetWithHttpInfo(healthcheckid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>ApiResponse of NhsProfile</returns>
        public ApiResponse< NhsProfile > MynhsMyDigitalhealthchecksHealthcheckidColesterolGetWithHttpInfo (string healthcheckid)
        {
            // verify the required parameter 'healthcheckid' is set
            if (healthcheckid == null)
                throw new ApiException(400, "Missing required parameter 'healthcheckid' when calling DigitalHealthChecksApi->MynhsMyDigitalhealthchecksHealthcheckidColesterolGet");

            var localVarPath = "./mynhs/my/digitalhealthchecks/{healthcheckid}/colesterol";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (healthcheckid != null) localVarPathParams.Add("healthcheckid", this.Configuration.ApiClient.ParameterToString(healthcheckid)); // path parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsMyDigitalhealthchecksHealthcheckidColesterolGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NhsProfile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of NhsProfile</returns>
        public async System.Threading.Tasks.Task<NhsProfile> MynhsMyDigitalhealthchecksHealthcheckidColesterolGetAsync (string healthcheckid)
        {
             ApiResponse<NhsProfile> localVarResponse = await MynhsMyDigitalhealthchecksHealthcheckidColesterolGetAsyncWithHttpInfo(healthcheckid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of ApiResponse (NhsProfile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NhsProfile>> MynhsMyDigitalhealthchecksHealthcheckidColesterolGetAsyncWithHttpInfo (string healthcheckid)
        {
            // verify the required parameter 'healthcheckid' is set
            if (healthcheckid == null)
                throw new ApiException(400, "Missing required parameter 'healthcheckid' when calling DigitalHealthChecksApi->MynhsMyDigitalhealthchecksHealthcheckidColesterolGet");

            var localVarPath = "./mynhs/my/digitalhealthchecks/{healthcheckid}/colesterol";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (healthcheckid != null) localVarPathParams.Add("healthcheckid", this.Configuration.ApiClient.ParameterToString(healthcheckid)); // path parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsMyDigitalhealthchecksHealthcheckidColesterolGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NhsProfile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>NhsProfile</returns>
        public NhsProfile MynhsMyDigitalhealthchecksHealthcheckidGet (string healthcheckid)
        {
             ApiResponse<NhsProfile> localVarResponse = MynhsMyDigitalhealthchecksHealthcheckidGetWithHttpInfo(healthcheckid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>ApiResponse of NhsProfile</returns>
        public ApiResponse< NhsProfile > MynhsMyDigitalhealthchecksHealthcheckidGetWithHttpInfo (string healthcheckid)
        {
            // verify the required parameter 'healthcheckid' is set
            if (healthcheckid == null)
                throw new ApiException(400, "Missing required parameter 'healthcheckid' when calling DigitalHealthChecksApi->MynhsMyDigitalhealthchecksHealthcheckidGet");

            var localVarPath = "./mynhs/my/digitalhealthchecks/{healthcheckid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (healthcheckid != null) localVarPathParams.Add("healthcheckid", this.Configuration.ApiClient.ParameterToString(healthcheckid)); // path parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsMyDigitalhealthchecksHealthcheckidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NhsProfile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of NhsProfile</returns>
        public async System.Threading.Tasks.Task<NhsProfile> MynhsMyDigitalhealthchecksHealthcheckidGetAsync (string healthcheckid)
        {
             ApiResponse<NhsProfile> localVarResponse = await MynhsMyDigitalhealthchecksHealthcheckidGetAsyncWithHttpInfo(healthcheckid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of ApiResponse (NhsProfile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NhsProfile>> MynhsMyDigitalhealthchecksHealthcheckidGetAsyncWithHttpInfo (string healthcheckid)
        {
            // verify the required parameter 'healthcheckid' is set
            if (healthcheckid == null)
                throw new ApiException(400, "Missing required parameter 'healthcheckid' when calling DigitalHealthChecksApi->MynhsMyDigitalhealthchecksHealthcheckidGet");

            var localVarPath = "./mynhs/my/digitalhealthchecks/{healthcheckid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (healthcheckid != null) localVarPathParams.Add("healthcheckid", this.Configuration.ApiClient.ParameterToString(healthcheckid)); // path parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsMyDigitalhealthchecksHealthcheckidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NhsProfile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>NhsProfile</returns>
        public NhsProfile MynhsMyDigitalhealthchecksHealthcheckidHeightGet (string healthcheckid)
        {
             ApiResponse<NhsProfile> localVarResponse = MynhsMyDigitalhealthchecksHealthcheckidHeightGetWithHttpInfo(healthcheckid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>ApiResponse of NhsProfile</returns>
        public ApiResponse< NhsProfile > MynhsMyDigitalhealthchecksHealthcheckidHeightGetWithHttpInfo (string healthcheckid)
        {
            // verify the required parameter 'healthcheckid' is set
            if (healthcheckid == null)
                throw new ApiException(400, "Missing required parameter 'healthcheckid' when calling DigitalHealthChecksApi->MynhsMyDigitalhealthchecksHealthcheckidHeightGet");

            var localVarPath = "./mynhs/my/digitalhealthchecks/{healthcheckid}/height";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (healthcheckid != null) localVarPathParams.Add("healthcheckid", this.Configuration.ApiClient.ParameterToString(healthcheckid)); // path parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsMyDigitalhealthchecksHealthcheckidHeightGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NhsProfile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of NhsProfile</returns>
        public async System.Threading.Tasks.Task<NhsProfile> MynhsMyDigitalhealthchecksHealthcheckidHeightGetAsync (string healthcheckid)
        {
             ApiResponse<NhsProfile> localVarResponse = await MynhsMyDigitalhealthchecksHealthcheckidHeightGetAsyncWithHttpInfo(healthcheckid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of ApiResponse (NhsProfile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NhsProfile>> MynhsMyDigitalhealthchecksHealthcheckidHeightGetAsyncWithHttpInfo (string healthcheckid)
        {
            // verify the required parameter 'healthcheckid' is set
            if (healthcheckid == null)
                throw new ApiException(400, "Missing required parameter 'healthcheckid' when calling DigitalHealthChecksApi->MynhsMyDigitalhealthchecksHealthcheckidHeightGet");

            var localVarPath = "./mynhs/my/digitalhealthchecks/{healthcheckid}/height";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (healthcheckid != null) localVarPathParams.Add("healthcheckid", this.Configuration.ApiClient.ParameterToString(healthcheckid)); // path parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsMyDigitalhealthchecksHealthcheckidHeightGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NhsProfile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>NhsProfile</returns>
        public NhsProfile MynhsMyDigitalhealthchecksHealthcheckidWeightGet (string healthcheckid)
        {
             ApiResponse<NhsProfile> localVarResponse = MynhsMyDigitalhealthchecksHealthcheckidWeightGetWithHttpInfo(healthcheckid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>ApiResponse of NhsProfile</returns>
        public ApiResponse< NhsProfile > MynhsMyDigitalhealthchecksHealthcheckidWeightGetWithHttpInfo (string healthcheckid)
        {
            // verify the required parameter 'healthcheckid' is set
            if (healthcheckid == null)
                throw new ApiException(400, "Missing required parameter 'healthcheckid' when calling DigitalHealthChecksApi->MynhsMyDigitalhealthchecksHealthcheckidWeightGet");

            var localVarPath = "./mynhs/my/digitalhealthchecks/{healthcheckid}/weight";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (healthcheckid != null) localVarPathParams.Add("healthcheckid", this.Configuration.ApiClient.ParameterToString(healthcheckid)); // path parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsMyDigitalhealthchecksHealthcheckidWeightGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NhsProfile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of NhsProfile</returns>
        public async System.Threading.Tasks.Task<NhsProfile> MynhsMyDigitalhealthchecksHealthcheckidWeightGetAsync (string healthcheckid)
        {
             ApiResponse<NhsProfile> localVarResponse = await MynhsMyDigitalhealthchecksHealthcheckidWeightGetAsyncWithHttpInfo(healthcheckid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of ApiResponse (NhsProfile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NhsProfile>> MynhsMyDigitalhealthchecksHealthcheckidWeightGetAsyncWithHttpInfo (string healthcheckid)
        {
            // verify the required parameter 'healthcheckid' is set
            if (healthcheckid == null)
                throw new ApiException(400, "Missing required parameter 'healthcheckid' when calling DigitalHealthChecksApi->MynhsMyDigitalhealthchecksHealthcheckidWeightGet");

            var localVarPath = "./mynhs/my/digitalhealthchecks/{healthcheckid}/weight";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (healthcheckid != null) localVarPathParams.Add("healthcheckid", this.Configuration.ApiClient.ParameterToString(healthcheckid)); // path parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsMyDigitalhealthchecksHealthcheckidWeightGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NhsProfile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>NhsProfile</returns>
        public NhsProfile MynhsMyDigitalhealthchecksHealthcheckidWellnessquestionsGet (string healthcheckid)
        {
             ApiResponse<NhsProfile> localVarResponse = MynhsMyDigitalhealthchecksHealthcheckidWellnessquestionsGetWithHttpInfo(healthcheckid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>ApiResponse of NhsProfile</returns>
        public ApiResponse< NhsProfile > MynhsMyDigitalhealthchecksHealthcheckidWellnessquestionsGetWithHttpInfo (string healthcheckid)
        {
            // verify the required parameter 'healthcheckid' is set
            if (healthcheckid == null)
                throw new ApiException(400, "Missing required parameter 'healthcheckid' when calling DigitalHealthChecksApi->MynhsMyDigitalhealthchecksHealthcheckidWellnessquestionsGet");

            var localVarPath = "./mynhs/my/digitalhealthchecks/{healthcheckid}/wellnessquestions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (healthcheckid != null) localVarPathParams.Add("healthcheckid", this.Configuration.ApiClient.ParameterToString(healthcheckid)); // path parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsMyDigitalhealthchecksHealthcheckidWellnessquestionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NhsProfile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of NhsProfile</returns>
        public async System.Threading.Tasks.Task<NhsProfile> MynhsMyDigitalhealthchecksHealthcheckidWellnessquestionsGetAsync (string healthcheckid)
        {
             ApiResponse<NhsProfile> localVarResponse = await MynhsMyDigitalhealthchecksHealthcheckidWellnessquestionsGetAsyncWithHttpInfo(healthcheckid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mynhs.sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="healthcheckid"></param>
        /// <returns>Task of ApiResponse (NhsProfile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NhsProfile>> MynhsMyDigitalhealthchecksHealthcheckidWellnessquestionsGetAsyncWithHttpInfo (string healthcheckid)
        {
            // verify the required parameter 'healthcheckid' is set
            if (healthcheckid == null)
                throw new ApiException(400, "Missing required parameter 'healthcheckid' when calling DigitalHealthChecksApi->MynhsMyDigitalhealthchecksHealthcheckidWellnessquestionsGet");

            var localVarPath = "./mynhs/my/digitalhealthchecks/{healthcheckid}/wellnessquestions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (healthcheckid != null) localVarPathParams.Add("healthcheckid", this.Configuration.ApiClient.ParameterToString(healthcheckid)); // path parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MynhsMyDigitalhealthchecksHealthcheckidWellnessquestionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NhsProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NhsProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NhsProfile)));
        }

    }
}
