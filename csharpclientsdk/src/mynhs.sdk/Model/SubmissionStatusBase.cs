/* 
 * My NHS Graph
 *
 * WIP Strawman API ideas for a Unified API myNHS API Graph endpoint, bringing together both new \"User Generated Data\" and existing sources into one endpoint and one Authorisation model, supporting delegated user access and proxy access. Modeling that the records belong to the \"tennant\" with owners having proxy access (ie full) and users being shared specifics records. Oauth scopes, with modifiers of .shared and .all. Look at Microsoft Graph for where that comes from. To support idempotency, all POST apis are just requests to start something, the put starts this. Alows for evential consistency. Long running GETs are removed, by POSTing requests for data, with a GET endpoint returned.
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = mynhs.sdk.Client.SwaggerDateConverter;

namespace mynhs.sdk.Model
{
    /// <summary>
    /// SubmissionStatusBase
    /// </summary>
    [DataContract]
        public partial class SubmissionStatusBase :  IEquatable<SubmissionStatusBase>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmissionStatusBase" /> class.
        /// </summary>
        /// <param name="submissionId">submissionId.</param>
        /// <param name="submittedByUserId">submittedByUserId.</param>
        /// <param name="submittedByAppId">submittedByAppId.</param>
        /// <param name="resourceId">resourceId.</param>
        /// <param name="dateSubmitted">dateSubmitted.</param>
        /// <param name="submissionStatusLocation">submissionStatusLocation.</param>
        /// <param name="resourceLocation">The location that the created resource will be avaliable at. Same as response header Location.</param>
        public SubmissionStatusBase(Guid? submissionId = default(Guid?), Guid? submittedByUserId = default(Guid?), Guid? submittedByAppId = default(Guid?), Guid? resourceId = default(Guid?), DateTimeOffset? dateSubmitted = default(DateTimeOffset?), string submissionStatusLocation = default(string), string resourceLocation = default(string))
        {
            this.SubmissionId = submissionId;
            this.SubmittedByUserId = submittedByUserId;
            this.SubmittedByAppId = submittedByAppId;
            this.ResourceId = resourceId;
            this.DateSubmitted = dateSubmitted;
            this.SubmissionStatusLocation = submissionStatusLocation;
            this.ResourceLocation = resourceLocation;
        }
        
        /// <summary>
        /// Gets or Sets SubmissionId
        /// </summary>
        [DataMember(Name="SubmissionId", EmitDefaultValue=false)]
        public Guid? SubmissionId { get; set; }

        /// <summary>
        /// Gets or Sets SubmittedByUserId
        /// </summary>
        [DataMember(Name="SubmittedByUserId", EmitDefaultValue=false)]
        public Guid? SubmittedByUserId { get; set; }

        /// <summary>
        /// Gets or Sets SubmittedByAppId
        /// </summary>
        [DataMember(Name="SubmittedByAppId", EmitDefaultValue=false)]
        public Guid? SubmittedByAppId { get; set; }

        /// <summary>
        /// Gets or Sets ResourceId
        /// </summary>
        [DataMember(Name="ResourceId", EmitDefaultValue=false)]
        public Guid? ResourceId { get; set; }

        /// <summary>
        /// Gets or Sets DateSubmitted
        /// </summary>
        [DataMember(Name="DateSubmitted", EmitDefaultValue=false)]
        public DateTimeOffset? DateSubmitted { get; set; }

        /// <summary>
        /// Gets or Sets SubmissionStatusLocation
        /// </summary>
        [DataMember(Name="SubmissionStatusLocation", EmitDefaultValue=false)]
        public string SubmissionStatusLocation { get; set; }

        /// <summary>
        /// The location that the created resource will be avaliable at. Same as response header Location
        /// </summary>
        /// <value>The location that the created resource will be avaliable at. Same as response header Location</value>
        [DataMember(Name="ResourceLocation", EmitDefaultValue=false)]
        public string ResourceLocation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubmissionStatusBase {\n");
            sb.Append("  SubmissionId: ").Append(SubmissionId).Append("\n");
            sb.Append("  SubmittedByUserId: ").Append(SubmittedByUserId).Append("\n");
            sb.Append("  SubmittedByAppId: ").Append(SubmittedByAppId).Append("\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("  DateSubmitted: ").Append(DateSubmitted).Append("\n");
            sb.Append("  SubmissionStatusLocation: ").Append(SubmissionStatusLocation).Append("\n");
            sb.Append("  ResourceLocation: ").Append(ResourceLocation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubmissionStatusBase);
        }

        /// <summary>
        /// Returns true if SubmissionStatusBase instances are equal
        /// </summary>
        /// <param name="input">Instance of SubmissionStatusBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubmissionStatusBase input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SubmissionId == input.SubmissionId ||
                    (this.SubmissionId != null &&
                    this.SubmissionId.Equals(input.SubmissionId))
                ) && 
                (
                    this.SubmittedByUserId == input.SubmittedByUserId ||
                    (this.SubmittedByUserId != null &&
                    this.SubmittedByUserId.Equals(input.SubmittedByUserId))
                ) && 
                (
                    this.SubmittedByAppId == input.SubmittedByAppId ||
                    (this.SubmittedByAppId != null &&
                    this.SubmittedByAppId.Equals(input.SubmittedByAppId))
                ) && 
                (
                    this.ResourceId == input.ResourceId ||
                    (this.ResourceId != null &&
                    this.ResourceId.Equals(input.ResourceId))
                ) && 
                (
                    this.DateSubmitted == input.DateSubmitted ||
                    (this.DateSubmitted != null &&
                    this.DateSubmitted.Equals(input.DateSubmitted))
                ) && 
                (
                    this.SubmissionStatusLocation == input.SubmissionStatusLocation ||
                    (this.SubmissionStatusLocation != null &&
                    this.SubmissionStatusLocation.Equals(input.SubmissionStatusLocation))
                ) && 
                (
                    this.ResourceLocation == input.ResourceLocation ||
                    (this.ResourceLocation != null &&
                    this.ResourceLocation.Equals(input.ResourceLocation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SubmissionId != null)
                    hashCode = hashCode * 59 + this.SubmissionId.GetHashCode();
                if (this.SubmittedByUserId != null)
                    hashCode = hashCode * 59 + this.SubmittedByUserId.GetHashCode();
                if (this.SubmittedByAppId != null)
                    hashCode = hashCode * 59 + this.SubmittedByAppId.GetHashCode();
                if (this.ResourceId != null)
                    hashCode = hashCode * 59 + this.ResourceId.GetHashCode();
                if (this.DateSubmitted != null)
                    hashCode = hashCode * 59 + this.DateSubmitted.GetHashCode();
                if (this.SubmissionStatusLocation != null)
                    hashCode = hashCode * 59 + this.SubmissionStatusLocation.GetHashCode();
                if (this.ResourceLocation != null)
                    hashCode = hashCode * 59 + this.ResourceLocation.GetHashCode();
                return hashCode;
            }
        }
    }
}
