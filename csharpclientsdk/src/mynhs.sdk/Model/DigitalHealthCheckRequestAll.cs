/* 
 * My NHS Graph
 *
 * WIP Strawman API ideas for a Unified API myNHS API Graph endpoint, bringing together both new \"User Generated Data\" and existing sources into one endpoint and one Authorisation model, supporting delegated user access and proxy access. Modeling that the records belong to the \"tennant\" with owners having proxy access (ie full) and users being shared specifics records. Oauth scopes, with modifiers of .shared and .all. Look at Microsoft Graph for where that comes from. To support idempotency, all POST apis are just requests to start something, the put starts this. Alows for evential consistency. Long running GETs are removed, by POSTing requests for data, with a GET endpoint returned.
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = mynhs.sdk.Client.SwaggerDateConverter;

namespace mynhs.sdk.Model
{
    /// <summary>
    /// DigitalHealthCheckRequestAll
    /// </summary>
    [DataContract]
        public partial class DigitalHealthCheckRequestAll :  IEquatable<DigitalHealthCheckRequestAll>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DigitalHealthCheckRequestAll" /> class.
        /// </summary>
        /// <param name="age">age (required).</param>
        /// <param name="height">height (required).</param>
        /// <param name="weight">weight (required).</param>
        /// <param name="bloodPressure">bloodPressure (required).</param>
        /// <param name="bloodSugar">bloodSugar (required).</param>
        /// <param name="colesterol">colesterol (required).</param>
        /// <param name="ethnicity">ethnicity (required).</param>
        /// <param name="alcoholUse">alcoholUse (required).</param>
        /// <param name="smoking">smoking (required).</param>
        /// <param name="physicalActivity">physicalActivity (required).</param>
        /// <param name="familyHistory">familyHistory (required).</param>
        /// <param name="gender">gender (required).</param>
        public DigitalHealthCheckRequestAll(Age age = default(Age), Height height = default(Height), Mass weight = default(Mass), BloodPressure bloodPressure = default(BloodPressure), BloodSugar bloodSugar = default(BloodSugar), Colesterol colesterol = default(Colesterol), string ethnicity = default(string), long? alcoholUse = default(long?), long? smoking = default(long?), long? physicalActivity = default(long?), long? familyHistory = default(long?), string gender = default(string))
        {
            // to ensure "age" is required (not null)
            if (age == null)
            {
                throw new InvalidDataException("age is a required property for DigitalHealthCheckRequestAll and cannot be null");
            }
            else
            {
                this.Age = age;
            }
            // to ensure "height" is required (not null)
            if (height == null)
            {
                throw new InvalidDataException("height is a required property for DigitalHealthCheckRequestAll and cannot be null");
            }
            else
            {
                this.Height = height;
            }
            // to ensure "weight" is required (not null)
            if (weight == null)
            {
                throw new InvalidDataException("weight is a required property for DigitalHealthCheckRequestAll and cannot be null");
            }
            else
            {
                this.Weight = weight;
            }
            // to ensure "bloodPressure" is required (not null)
            if (bloodPressure == null)
            {
                throw new InvalidDataException("bloodPressure is a required property for DigitalHealthCheckRequestAll and cannot be null");
            }
            else
            {
                this.BloodPressure = bloodPressure;
            }
            // to ensure "bloodSugar" is required (not null)
            if (bloodSugar == null)
            {
                throw new InvalidDataException("bloodSugar is a required property for DigitalHealthCheckRequestAll and cannot be null");
            }
            else
            {
                this.BloodSugar = bloodSugar;
            }
            // to ensure "colesterol" is required (not null)
            if (colesterol == null)
            {
                throw new InvalidDataException("colesterol is a required property for DigitalHealthCheckRequestAll and cannot be null");
            }
            else
            {
                this.Colesterol = colesterol;
            }
            // to ensure "ethnicity" is required (not null)
            if (ethnicity == null)
            {
                throw new InvalidDataException("ethnicity is a required property for DigitalHealthCheckRequestAll and cannot be null");
            }
            else
            {
                this.Ethnicity = ethnicity;
            }
            // to ensure "alcoholUse" is required (not null)
            if (alcoholUse == null)
            {
                throw new InvalidDataException("alcoholUse is a required property for DigitalHealthCheckRequestAll and cannot be null");
            }
            else
            {
                this.AlcoholUse = alcoholUse;
            }
            // to ensure "smoking" is required (not null)
            if (smoking == null)
            {
                throw new InvalidDataException("smoking is a required property for DigitalHealthCheckRequestAll and cannot be null");
            }
            else
            {
                this.Smoking = smoking;
            }
            // to ensure "physicalActivity" is required (not null)
            if (physicalActivity == null)
            {
                throw new InvalidDataException("physicalActivity is a required property for DigitalHealthCheckRequestAll and cannot be null");
            }
            else
            {
                this.PhysicalActivity = physicalActivity;
            }
            // to ensure "familyHistory" is required (not null)
            if (familyHistory == null)
            {
                throw new InvalidDataException("familyHistory is a required property for DigitalHealthCheckRequestAll and cannot be null");
            }
            else
            {
                this.FamilyHistory = familyHistory;
            }
            // to ensure "gender" is required (not null)
            if (gender == null)
            {
                throw new InvalidDataException("gender is a required property for DigitalHealthCheckRequestAll and cannot be null");
            }
            else
            {
                this.Gender = gender;
            }
        }
        
        /// <summary>
        /// Gets or Sets Age
        /// </summary>
        [DataMember(Name="Age", EmitDefaultValue=false)]
        public Age Age { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name="Height", EmitDefaultValue=false)]
        public Height Height { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="Weight", EmitDefaultValue=false)]
        public Mass Weight { get; set; }

        /// <summary>
        /// Gets or Sets BloodPressure
        /// </summary>
        [DataMember(Name="BloodPressure", EmitDefaultValue=false)]
        public BloodPressure BloodPressure { get; set; }

        /// <summary>
        /// Gets or Sets BloodSugar
        /// </summary>
        [DataMember(Name="BloodSugar", EmitDefaultValue=false)]
        public BloodSugar BloodSugar { get; set; }

        /// <summary>
        /// Gets or Sets Colesterol
        /// </summary>
        [DataMember(Name="Colesterol", EmitDefaultValue=false)]
        public Colesterol Colesterol { get; set; }

        /// <summary>
        /// Gets or Sets Ethnicity
        /// </summary>
        [DataMember(Name="Ethnicity", EmitDefaultValue=false)]
        public string Ethnicity { get; set; }

        /// <summary>
        /// Gets or Sets AlcoholUse
        /// </summary>
        [DataMember(Name="AlcoholUse", EmitDefaultValue=false)]
        public long? AlcoholUse { get; set; }

        /// <summary>
        /// Gets or Sets Smoking
        /// </summary>
        [DataMember(Name="Smoking", EmitDefaultValue=false)]
        public long? Smoking { get; set; }

        /// <summary>
        /// Gets or Sets PhysicalActivity
        /// </summary>
        [DataMember(Name="PhysicalActivity", EmitDefaultValue=false)]
        public long? PhysicalActivity { get; set; }

        /// <summary>
        /// Gets or Sets FamilyHistory
        /// </summary>
        [DataMember(Name="FamilyHistory", EmitDefaultValue=false)]
        public long? FamilyHistory { get; set; }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name="Gender", EmitDefaultValue=false)]
        public string Gender { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DigitalHealthCheckRequestAll {\n");
            sb.Append("  Age: ").Append(Age).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  BloodPressure: ").Append(BloodPressure).Append("\n");
            sb.Append("  BloodSugar: ").Append(BloodSugar).Append("\n");
            sb.Append("  Colesterol: ").Append(Colesterol).Append("\n");
            sb.Append("  Ethnicity: ").Append(Ethnicity).Append("\n");
            sb.Append("  AlcoholUse: ").Append(AlcoholUse).Append("\n");
            sb.Append("  Smoking: ").Append(Smoking).Append("\n");
            sb.Append("  PhysicalActivity: ").Append(PhysicalActivity).Append("\n");
            sb.Append("  FamilyHistory: ").Append(FamilyHistory).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DigitalHealthCheckRequestAll);
        }

        /// <summary>
        /// Returns true if DigitalHealthCheckRequestAll instances are equal
        /// </summary>
        /// <param name="input">Instance of DigitalHealthCheckRequestAll to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DigitalHealthCheckRequestAll input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Age == input.Age ||
                    (this.Age != null &&
                    this.Age.Equals(input.Age))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.BloodPressure == input.BloodPressure ||
                    (this.BloodPressure != null &&
                    this.BloodPressure.Equals(input.BloodPressure))
                ) && 
                (
                    this.BloodSugar == input.BloodSugar ||
                    (this.BloodSugar != null &&
                    this.BloodSugar.Equals(input.BloodSugar))
                ) && 
                (
                    this.Colesterol == input.Colesterol ||
                    (this.Colesterol != null &&
                    this.Colesterol.Equals(input.Colesterol))
                ) && 
                (
                    this.Ethnicity == input.Ethnicity ||
                    (this.Ethnicity != null &&
                    this.Ethnicity.Equals(input.Ethnicity))
                ) && 
                (
                    this.AlcoholUse == input.AlcoholUse ||
                    (this.AlcoholUse != null &&
                    this.AlcoholUse.Equals(input.AlcoholUse))
                ) && 
                (
                    this.Smoking == input.Smoking ||
                    (this.Smoking != null &&
                    this.Smoking.Equals(input.Smoking))
                ) && 
                (
                    this.PhysicalActivity == input.PhysicalActivity ||
                    (this.PhysicalActivity != null &&
                    this.PhysicalActivity.Equals(input.PhysicalActivity))
                ) && 
                (
                    this.FamilyHistory == input.FamilyHistory ||
                    (this.FamilyHistory != null &&
                    this.FamilyHistory.Equals(input.FamilyHistory))
                ) && 
                (
                    this.Gender == input.Gender ||
                    (this.Gender != null &&
                    this.Gender.Equals(input.Gender))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Age != null)
                    hashCode = hashCode * 59 + this.Age.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.BloodPressure != null)
                    hashCode = hashCode * 59 + this.BloodPressure.GetHashCode();
                if (this.BloodSugar != null)
                    hashCode = hashCode * 59 + this.BloodSugar.GetHashCode();
                if (this.Colesterol != null)
                    hashCode = hashCode * 59 + this.Colesterol.GetHashCode();
                if (this.Ethnicity != null)
                    hashCode = hashCode * 59 + this.Ethnicity.GetHashCode();
                if (this.AlcoholUse != null)
                    hashCode = hashCode * 59 + this.AlcoholUse.GetHashCode();
                if (this.Smoking != null)
                    hashCode = hashCode * 59 + this.Smoking.GetHashCode();
                if (this.PhysicalActivity != null)
                    hashCode = hashCode * 59 + this.PhysicalActivity.GetHashCode();
                if (this.FamilyHistory != null)
                    hashCode = hashCode * 59 + this.FamilyHistory.GetHashCode();
                if (this.Gender != null)
                    hashCode = hashCode * 59 + this.Gender.GetHashCode();
                return hashCode;
            }
        }
    }
}
